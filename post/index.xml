<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 哎，蘑菇</title>
    <link>http://imogu.us/post/</link>
    <description>Recent content in Posts on 哎，蘑菇</description>
    <generator>Hugo -- gohugo.io</generator>
    
    
    
    <copyright>Copyright (c) 2008 - 2014, nehe; all rights reserved.</copyright>
    <lastBuildDate>Fri, 20 Feb 2015 01:38:38 CST</lastBuildDate>
    <atom:link href="http://imogu.us/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go by Example - 常量</title>
      <link>http://imogu.us/2015/02/gobyexample-constants/</link>
      <pubDate>Fri, 20 Feb 2015 01:38:38 CST</pubDate>
      
      <guid>http://imogu.us/2015/02/gobyexample-constants/</guid>
      <description>&lt;p&gt;Go 支持的常量类型有字符型，string， boolean以及数字型。&lt;/p&gt;

&lt;p&gt;在代码中通过关键字*const*来声明常量。
const表达式可以出现在任何可以通过var表达式声明变量的地方。&lt;/p&gt;

&lt;p&gt;如下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
)

const s string = &amp;quot;constant&amp;quot;

func main() {
	fmt.Println(s)

	const n = 500000000
	const d = 3e20 / n
	fmt.Println(d)

	fmt.Println(int64(d))
	fmt.Println(math.Sin(n))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run constants.go
constant
6e+11
600000000000
-0.28470407323754404
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下节例子： [for]&lt;/p&gt;

&lt;p&gt;[for]:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go by Example - 变量</title>
      <link>http://imogu.us/2015/02/gobyexample-variables/</link>
      <pubDate>Fri, 20 Feb 2015 01:17:55 CST</pubDate>
      
      <guid>http://imogu.us/2015/02/gobyexample-variables/</guid>
      <description>&lt;p&gt;在Go中，变量需要显示声明给编译器，因此并非解释性语言，而是如C/C++一样属于强类型语言。&lt;/p&gt;

&lt;p&gt;如下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	var a = &amp;quot;literal&amp;quot;
	fmt.Println(a)

	var b, c = 1, 2
	fmt.Println(b, c)

	var d = true
	fmt.Println(d)

	var e int
	fmt.Println(e)

	f := &amp;quot;short&amp;quot;
	fmt.Println(f)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过var显示的声明变量如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a ＝ &amp;quot;literal&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以同时定义多个变量，Go会根据变量的初始值为变量定义类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var b, c = 1, 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;未初始化的变量会被初始化为0值，例如int型的0值是0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var e int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以通过:=这个简化版本来声明和初始化变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f := &amp;quot;short&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run variables.go
literal
1 2
true
0
short
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下节例子： [常量] [1]&lt;/p&gt;

&lt;p&gt;[1]:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go by Example － 值</title>
      <link>http://imogu.us/2015/02/gobyexample-values/</link>
      <pubDate>Fri, 20 Feb 2015 00:59:19 CST</pubDate>
      
      <guid>http://imogu.us/2015/02/gobyexample-values/</guid>
      <description>&lt;p&gt;Go语言中的值有各种类型，如strings，intergers，floats，booleans等，下面是一些简单的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;go&amp;quot; + &amp;quot;lang&amp;quot;)
    fmt.Println(&amp;quot;1+1=&amp;quot;, 1+1)
    fmt.Println(&amp;quot;7.0/3.0=&amp;quot;, 7.0/3.0)
    fmt.Println(true &amp;amp;&amp;amp; false)
    fmt.Println(true || false)
    fmt.Println(!true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strings 可以通过＋来拼接。
Intergers，floats，booleans等都和我们之前所学的语言类似。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run values.go 
golang
1+1= 2
7.0/3.0= 2.3333333333333335
false
true
false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下节例子： [变量] [1]&lt;/p&gt;

&lt;p&gt;[1]:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go by Example - Hello World</title>
      <link>http://imogu.us/2015/02/gobyexample-helloworld/</link>
      <pubDate>Fri, 20 Feb 2015 00:34:06 CST</pubDate>
      
      <guid>http://imogu.us/2015/02/gobyexample-helloworld/</guid>
      <description>&lt;p&gt;我们的第一个Go程序将打印出经典的“hello world”，下面是完整的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
        fmt.Println(&amp;quot;Hello, World&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们将代码保存在hello-world.go中，可以通过go run来直接运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go run hello-world.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者我们可以先将它编译成二进制的可执行程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go build hello-world.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着可以直接运行它：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ ./hello-world 
   Hello, World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们可以编译和运行基本的Go程序了，下面让我们了解更多Go的知识咯.&lt;/p&gt;

&lt;p&gt;下节例子: [值] [1]&lt;/p&gt;

&lt;p&gt;[1]:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Hugo on Github How to</title>
      <link>http://imogu.us/2015/02/how-to-setup-hugo-github/</link>
      <pubDate>Wed, 18 Feb 2015 00:38:59 CST</pubDate>
      
      <guid>http://imogu.us/2015/02/how-to-setup-hugo-github/</guid>
      <description>

&lt;p&gt;Hugo是一个轻量级的静态网站生成系统，可以帮助你很迅速的生成一个简单的博客网站，当然如果你有心，还可以让他更强大，下面就来简单记录下在Github上建立Hugo站的方法。&lt;/p&gt;

&lt;h2 id=&#34;安装hugo:4901d8f2e742100b5e9437c7346b5caf&#34;&gt;安装Hugo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt;的安装很简单，按照官网介绍即可，在Mac上可以选择source安装，或者brew。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是，Hugo是基于Go开发的，因此需要Go的环境来支持，如何安装&lt;a href=&#34;https://golang.org/&#34; title=&#34;Go Language&#34;&gt;Go&lt;/a&gt; 请猛戳&lt;a href=&#34;https://golang.org/doc/install/&#34;&gt;安装Go&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用hugo建立你的博客:4901d8f2e742100b5e9437c7346b5caf&#34;&gt;使用Hugo建立你的博客&lt;/h2&gt;

&lt;p&gt;Hugo建立网站只需要一个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建立完成后就可以马上在本地将Server运行起来查看效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -w -t hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里是使用了hyde这个主题。&lt;/p&gt;

&lt;h2 id=&#34;创建你的第一篇文章:4901d8f2e742100b5e9437c7346b5caf&#34;&gt;创建你的第一篇文章&lt;/h2&gt;

&lt;p&gt;可以通过下面的命令来创建文章：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/fist.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开并使用markdown语法来编写文章就可以啦：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; +++
 date = &amp;quot;2015-02-18T00:38:59+08:00&amp;quot;
 title = &amp;quot;Setup Hogo on Github How to&amp;quot;
 tag = [&amp;quot;hugo&amp;quot;, &amp;quot;howto&amp;quot;]
 categories = [&amp;quot;howto&amp;quot;]
 +++

 The First

 Hello ....
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;入驻github:4901d8f2e742100b5e9437c7346b5caf&#34;&gt;入驻Github&lt;/h2&gt;

&lt;p&gt;思路很简单，建立两个repo，一个用来储存Blog的Hugo源文件，包含md，模版等，另一个repo则只包含Hugo生成的Public目录，即静态网页内容，而我们访问的就是这个静态网页的repo。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>